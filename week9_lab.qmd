---
title: "week9"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(rpart)
library(rpart.plot)
library(terra)
library(sf)
library(here)
library(tmap)
```

```{r}
file_list <- list.files(here("data", "landsat-data"), full.names = TRUE)

landsat <- rast(file_list)

names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", 'SWIR2')

plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
```

## Load study area

```{r}
# read in shapefile for portion of SB county
SB_county_south <- st_read(here("data", "SB_county_south.shp")) |> 
  st_transform(., crs = crs(landsat))

tm_shape(SB_county_south) +
  tm_borders()


```

```{r}
# crop the landsat scene to the extent of the study area
landsat_cropped <- terra::crop(landsat, SB_county_south)

# mask the raster to the study area
landsat_masked <- terra::mask(landsat_cropped, SB_county_south)

rm(landsat, SB_county_south, landsat_cropped)

plotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = "lin")
```

## converting landsat value into reflectance

```{r}
# reclassify erroneous values as N/A
rcl <- matrix(c(-Inf, 7273, NA,
                43636, Inf, NA),
              ncol = 3, byrow=TRUE)
landsat <- terra::classify(landsat_masked, rcl = rcl)

# adjust values based on scaling and additive factor
landsat <- (landsat * 0.0000275 - 0.2) * 100
summary(landsat)
```

## training classifier

```{r}
# read in training data
training_data <- st_read(here::here("data", "trainingdata.shp")) |> 
  st_transform(, crs(landsat))

```

```{r}
# extract reflectance values at training sites
training_data_values <- terra::extract(landsat, training_data, df = TRUE)

training_data_attributes <- training_data |> 
  st_drop_geometry()

SB_training_data <- left_join(training_data_values, training_data_attributes, by = c("ID" = "id")) |> 
  mutate(type = as.factor(type))
```

```{r}
# establish model formula

SB_formula <- type ~ red + green +blue + NIR + SWIR1 + SWIR2

# train our decision tree

SB_decision_tree <- rpart(formula = SB_formula,
                          data = SB_training_data,
                          method = "class",
                          na.action = na.omit)

prp(SB_decision_tree)
```

## classify image

```{r}
# classify image based on decision tree
SB_classification <- terra::predict(landsat, SB_decision_tree, type = "class", na.rm = TRUE)

# inspect level to understand the order of classes in prediction
levels(SB_training_data$type)
levels(SB_classification)
```

```{r}
tm_shape(SB_classification) +
  tm_raster(palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type") +
  tm_layout(legend.position = c("left", "bottom"),
            main.title = "Santa Barbara Landcover")
```

